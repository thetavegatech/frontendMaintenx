import React, { useState, useEffect } from 'react'
import './Breakdown.css'
import { useNavigate } from 'react-router-dom'
import axios from 'axios'

export default function BreakDown() {
  const [usernos, setUsers] = useState([])
  const [selectedUserId, setSelectedUserId] = useState('')
  const [selectedUserName, setSelectedUserName] = useState('')
  const [selectedUsers, setSelectedUsers] = useState([])
  const [selected, setSelected] = useState(null)

  useEffect(() => {
    // Fetch user data from the server
    axios
      .get('http://192.168.29.93:5000/UserNo')
      .then((response) => {
        setUsers(response.data)
      })
      .catch((error) => {
        console.error('Error fetching user data:', error)
      })
  }, [])
  // Modify the handleUserSelect function
  // const handleUserSelect = (_id) => {
  //   // setno(_id)
  //   return console.log(_id)

  //   // const no = _id
  //   // console.log(no)
  //   // setno(no)
  //   // // console.log(_id)
  //   // const selectedUser = usernos.find((user) => user.phoneNumber === _id)
  //   // // console.log(selectedUser)
  //   // // setSelectedUsers(selectedUser)
  //   // // let number = _id
  //   // // console.log(number)

  //   // if (selectedUser) {
  //   //   // setSelectedUsers(selectedUser)
  //   //   // Check if the user is already selected
  //   //   const isSelected = selectedUsers.some((user) => user.phoneNumber === selectedUser.phoneNumber)
  //   //   // console.log(isSelected)

  //   //   if (!isSelected) {
  //   //     // If not selected, add the user to the array
  //   //     setSelectedUsers([...selectedUsers, selectedUser])
  //   //   }
  //   // }
  // }

  const handleUserSelect = (_id) => {
    const selectedUser = usernos.find((user) => user.phoneNumber === _id)

    if (selectedUser) {
      const isSelected = selectedUsers.some((user) => user.phoneNumber === selectedUser.phoneNumber)

      if (!isSelected) {
        setSelectedUsers([...selectedUsers, selectedUser])
      } else {
        setSelectedUsers(
          selectedUsers.filter((user) => user.phoneNumber !== selectedUser.phoneNumber),
        )
      }
    }
  }

  const navigate = useNavigate()
  const [formData, setFormData] = useState({
    MachineName: '',
    BreakdownStartDate: '',
    BreakdownEndDate: '',
    BreakdownStartTime: '',
    BreakdownEndTime: '',
    Shift: '',
    LineName: '',
    StageName: '',
    BreakdownPhenomenons: '',
    BreakdownType: '',
    OCC: '',
    BreakdownTime: '',
    ActionTaken: '',
    WhyWhyAnalysis: '',
    RootCause: '',
    PermanentAction: '',
    TargetDate: '',
    Responsibility: '',
    HD: '',
    Remark: '',
    Status: 'open',
  })
  const [machineNames, setMachineNames] = useState([])
  const [assetNames, setAssetNames] = useState([])

  useEffect(() => {
    // Fetch asset names from 'http://localhost:5000/getAllData'
    fetch('http://192.168.29.93:5000/getAllData')
      .then((res) => res.json())
      .then((data) => {
        // Extract unique asset names from the data
        const uniqueAssetNames = [...new Set(data.map((item) => item.AssetName))]
        // Set the assetNames state with the unique asset names
        setAssetNames(uniqueAssetNames)
      })
      .catch((error) => {
        console.error('Error fetching asset names: ', error)
      })
  }, [])

  useEffect(() => {
    // Fetch the breakdown data from your API
    fetch('http://192.168.29.93:5000/getBreakdownData')
      .then((res) => res.json())
      .then((data) => {
        // Extract unique machine names from the breakdown data
        const uniqueMachineNames = [...new Set(data.map((item) => item.MachineName))]
        // Set the machineNames state with the unique machine names
        setMachineNames(uniqueMachineNames)
      })
      .catch((error) => {
        console.error('Error fetching breakdown data: ', error)
      })
  }, [])

  const handleSubmit = (e) => {
    e.preventDefault()

    const {
      MachineName,
      BreakdownStartDate,
      BreakdownEndDate,
      BreakdownStartTime,
      BreakdownEndTime,
      Shift,
      LineName,
      StageName,
      BreakdownPhenomenons,
      BreakdownType,
      OCC,
      ActionTaken,
      WhyWhyAnalysis,
      RootCause,
      PermanentAction,
      TargetDate,
      Responsibility,
      HD,
      Remark,
      Status = 'open',
    } = formData

    console.log(
      MachineName,
      BreakdownStartDate,
      BreakdownEndDate,
      BreakdownStartTime,
      BreakdownEndTime,
      Shift,
      LineName,
      StageName,
      BreakdownPhenomenons,
      BreakdownType,
      OCC,
      ActionTaken,
      WhyWhyAnalysis,
      RootCause,
      PermanentAction,
      TargetDate,
      Responsibility,
      HD,
      Remark,
      Status,
    )

    fetch('http://192.168.29.93:5000/saveBreakdown', {
      method: 'POST',
      headers: {
        'Content-type': 'application/json',
        Accept: 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
      body: JSON.stringify({
        MachineName,
        BreakdownStartDate,
        BreakdownEndDate,
        BreakdownStartTime,
        BreakdownEndTime,
        Shift,
        LineName,
        StageName,
        BreakdownPhenomenons,
        BreakdownType,
        OCC,
        ActionTaken,
        WhyWhyAnalysis,
        RootCause,
        PermanentAction,
        TargetDate,
        Responsibility,
        HD,
        Remark,
        Status,
      }),
    })
      .then((res) => res.json())
      .then((data) => {
        console.log(data, 'add breakdown data')
        console.log(MachineName)
        navigate(-1)
      })
  }

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    })
  }
  const apiKey = 'NDE1MDY2NGM2Mzc3NTI0ZjQzNmE1YTM5NDY0YzZlNzU='
  const numbers = '7020804148' // Replace with the phone numbers
  const data1 = 'test'
  const data2 = 'test'
  const sender = 'AAABRD'

  const sendSMS = (formData, selectedUsers) => {
    console.log('Selected Users:', selectedUsers)
    // Check if there are selected users
    if (selectedUsers.length === 0) {
      console.error('No recipients specified')
      return // Exit the function if no recipients are specified
    }

    const { MachineName, BreakdownPhenomenons } = formData

    // Formulate a simple message
    const message = encodeURIComponent(
      `Breakdown For ${MachineName}. Details: ${BreakdownPhenomenons} - Aurangabad Auto Ancillary`,
    )

    // Create the API URL
    const url = `https://api.textlocal.in/send/?apikey=${apiKey}&sender=${sender}&numbers=${selectedUsers
      .map((user) => user.phoneNumber)
      .join(',')}&message=${message}`

    // Use fetch to send the SMS
    fetch(url)
      .then((response) => response.json())
      .then((data) => {
        console.log('SMS sent successfully:', data)
        console.log(selectedUsers, message)
      })
      .catch((error) => {
        console.error('Error sending SMS:', error)
        console.log(selectedUsers)
      })
  }

  const handleButtonClick = () => {
    // Call the SMS sending function
    sendSMS(formData, selectedUsers)
  }
  return (
    <>
      <div
        className="container-lg"
        style={{
          border: '2px solid #ccc',
          backgroundColor: 'lightgrey',
          padding: '20px',
          borderRadius: '10px',
          boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
          width: '90%',
        }}
      >
        <div className="container">
          <form action="#" method="post" onSubmit={handleSubmit}>
            {/* Add Breakdown Detail Fields */}
            {/* <h3>Add Breakdown Detail</h3> */}
            <div className="row g-2">
              <div className="col-md-6">
                <label htmlFor="machineName" style={{ marginBottom: '5px', fontSize: '16px' }}>
                  Machine Name:
                </label>
                <select
                  className="form-control col-sm-6"
                  required
                  name="MachineName"
                  value={formData.AssetName}
                  onChange={handleChange}
                  style={{ marginBottom: '10px' }}
                >
                  <option value="">Select a machine</option>
                  {/* Populate the dropdown options with asset names */}
                  {assetNames.map((asset, index) => (
                    <option key={index} value={asset}>
                      {asset}
                    </option>
                  ))}
                </select>
              </div>
              <div className="col-md-6">
                <label htmlFor="breakdownDate">Breakdown Start Date:</label>
                <input
                  type="date"
                  required
                  className="form-control col-sm-6"
                  name="BreakdownStartDate"
                  value={formData.BreakdownStartDate}
                  onChange={handleChange}
                  placeholder=""
                />
              </div>
              <div className="col-md-6">
                <label htmlFor="shift">Shift:</label>
                <input
                  type="text"
                  required
                  className="form-control col-sm-6"
                  name="Shift"
                  value={formData.Shift}
                  onChange={handleChange}
                  placeholder=""
                />
              </div>
              <div className="col-md-6">
                <label htmlFor="brekdownStartTime">BreakdownStartTime:</label>
                <input
                  type="text"
                  required
                  className="form-control col-sm-6"
                  name="BreakdownStartTime"
                  value={formData.BreakdownStartTime}
                  onChange={handleChange}
                  placeholder=""
                />
              </div>
              <div className="col-md-6">
                <label htmlFor="lineName">Line Name:</label>
                <input
                  type="text"
                  required
                  name="LineName"
                  className="form-control col-sm-6"
                  value={formData.LineName}
                  onChange={handleChange}
                  placeholder=""
                />
              </div>
              <div className="col-md-6">
                <label htmlFor="stageName">Stage Name:</label>
                <input
                  type="text"
                  required
                  className="form-control col-sm-6"
                  name="StageName"
                  value={formData.StageName}
                  onChange={handleChange}
                  placeholder=""
                />
              </div>
              <div className="col-md-6">
                <label htmlFor="breakdownPhenomen">Breakdown Phenomenon:</label>
                <input
                  type="text"
                  required
                  name="BreakdownPhenomenons"
                  className="form-control col-sm-6"
                  value={formData.BreakdownPhenomenons}
                  onChange={handleChange}
                  placeholder=""
                />
              </div>
              <div className="row g-2">
                <div className="col-md-6">
                  <label htmlFor="selectedUser">Select a user:</label>
                  <div className="input-group">
                    <select
                      className="form-control"
                      onChange={(e) => handleUserSelect(e.target.value)}
                      multiple // Enable multiple selection
                    >
                      <option value="">Select a user</option>
                      {usernos.map((user) => (
                        <option key={user.phoneNumber} value={user.phoneNumber}>
                          {user.name}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
                <div className="col-md-6">
                  <label>Selected Users:</label>
                  <ul>
                    {selectedUsers.map((user) => (
                      <li key={user.phoneNumber}>
                        {user.name} - {user.phoneNumber}
                      </li>
                    ))}
                  </ul>
                </div>
                <div className="col-xs-12">
                  <button
                    type="submit"
                    onClick={handleButtonClick}
                    className="btn btn-primary"
                    style={{ marginTop: '20px', fontSize: '16px', backgroundColor: '#3448db' }}
                  >
                    Submit
                  </button>
                </div>
              </div>
              {/* </div> */}
            </div>
          </form>
        </div>
      </div>
    </>
  )
}
